from __future__ import annotations

import fnmatch
import html
import os
import time
from typing import Any, Dict, List, Optional

from app.services.parser import parse_python_project


def _ts() -> str:
    return time.strftime("%Y%m%d-%H%M%S")


def _ensure_dir(p: str) -> None:
    os.makedirs(p, exist_ok=True)


def _should_exclude(rel_path: str, patterns: Optional[List[str]]) -> bool:
    if not patterns:
        return False
    rp = rel_path.replace("\\", "/")
    for pat in patterns:
        if fnmatch.fnmatch(rp, pat):
            return True
    return False


def _safe_name(s: str) -> str:
    return "".join(c if c.isalnum() or c in "-._" else "_" for c in s)


def _write(path: str, content: str) -> None:
    _ensure_dir(os.path.dirname(path))
    with open(path, "w", encoding="utf-8") as f:
        f.write(content)


def _page(title: str, body: str) -> str:
    return f"""<!doctype html>
<html lang="zh">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>{html.escape(title)}</title>
<style>
:root {{ --fg:#0f172a; --muted:#475569; --bg:#ffffff; --acc:#0ea5e9; --code:#0b1020; --code-bg:#f8fafc; }}
html,body {{ margin:0; padding:0; background:var(--bg); color:var(--fg); font:14px/1.6 -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,"Noto Sans","PingFang SC","Hiragino Sans GB","Microsoft YaHei",sans-serif; }}
a {{ color:var(--acc); text-decoration:none; }}
a:hover {{ text-decoration:underline; }}
.container {{ max-width: 1080px; margin: 0 auto; padding: 32px 20px; }}
h1,h2,h3,h4 {{ line-height:1.25; }}
.card {{ border:1px solid #e5e7eb; border-radius:10px; padding:16px; margin:12px 0; background:#fff; }}
.badge {{ display:inline-block; font-size:12px; color:#fff; background:#10b981; padding:2px 8px; border-radius:999px; margin-left:8px; vertical-align:middle; }}
.code {{ font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Fira Code", monospace; background:var(--code-bg); color:var(--code); padding:2px 6px; border-radius:6px; }}
pre {{ background:var(--code-bg); padding:12px; overflow:auto; border-radius:8px; }}
.sep {{ height:1px; background:#e5e7eb; margin:24px 0; }}
.list ul {{ margin:6px 0 6px 18px; }}
.footer {{ margin-top:32px; color:var(--muted); font-size:12px; }}
</style>
</head>
<body>
<div class="container">
{body}
<div class="footer">Generated by MCP DocSite (builtin) at {html.escape(_ts())}</div>
</div>
</body>
</html>"""


def build_builtin_site(
    project_dir: str,
    site_dir: Optional[str] = None,
    exclude_patterns: Optional[List[str]] = None,
    docformat: str = "google",
    language: str = "zh",
) -> Dict[str, Any]:
    """
    内置静态站点生成器（零依赖、零导入）：
    - 使用 parse_python_project 解析源码抽象结构
    - 渲染简洁HTML站点：index.html + 每个模块页面
    - 不执行/导入项目代码，避免环境依赖问题
    """
    project_dir = os.path.abspath(project_dir)
    if site_dir is None:
        site_dir = os.path.join(project_dir, "_site")
    site_dir = os.path.abspath(site_dir)
    _ensure_dir(site_dir)

    docs = parse_python_project(project_dir)
    # 过滤 exclude
    filtered = []
    for m in docs:
        rel = os.path.relpath(m.path, project_dir)
        if _should_exclude(rel, exclude_patterns):
            continue
        filtered.append(m)

    # 汇总指标
    modules = len(filtered)
    classes = sum(len(m.classes) for m in filtered)
    functions = sum(len(m.functions) for m in filtered)
    methods = sum(len(c.methods) for m in filtered for c in m.classes)
    missing_module_docs = sum(1 for m in filtered if not m.docstring)

    # 生成 index.html
    rows = []
    rows.append(f"<h1>项目文档站点 <span class='badge'>builtin</span></h1>")
    rows.append("<div class='card'>")
    rows.append("<b>概览</b><br>")
    rows.append(f"模块: <span class='code'>{modules}</span>，类: <span class='code'>{classes}</span>，函数: <span class='code'>{functions}</span>，方法: <span class='code'>{methods}</span><br>")
    rows.append(f"缺少模块文档: <span class='code'>{missing_module_docs}</span>")
    rows.append("</div>")

    rows.append("<div class='sep'></div>")
    rows.append("<h2>模块列表</h2>")
    rows.append("<div class='list'>")
    rows.append("<ul>")
    for m in filtered:
        fname = f"module-{_safe_name(m.module)}.html"
        rows.append(f"<li><a href='{fname}'>{html.escape(m.module)}</a> <span class='code'>{html.escape(os.path.relpath(m.path, project_dir))}</span></li>")
    rows.append("</ul>")
    rows.append("</div>")

    index_html = _page("文档站点 - 索引", "\n".join(rows))
    _write(os.path.join(site_dir, "index.html"), index_html)

    # 生成每个模块页面
    for m in filtered:
        parts: List[str] = []
        parts.append(f"<h1>模块 {html.escape(m.module)}</h1>")
        parts.append(f"<div class='card'><b>文件</b>：<span class='code'>{html.escape(os.path.relpath(m.path, project_dir))}</span></div>")
        if m.docstring:
            parts.append("<h2>模块说明</h2>")
            parts.append(f"<pre>{html.escape(m.docstring)}</pre>")

        if m.classes:
            parts.append("<h2>类</h2>")
            for c in m.classes:
                parts.append(f"<div class='card'><h3>class {html.escape(c.name)}</h3>")
                if c.docstring:
                    parts.append(f"<pre>{html.escape(c.docstring)}</pre>")
                if c.methods:
                    parts.append("<b>方法</b><ul>")
                    for f in c.methods:
                        sig = f.signature if hasattr(f, "signature") and f.signature else f.name
                        parts.append(f"<li><span class='code'>{html.escape(sig)}</span></li>")
                    parts.append("</ul>")
                parts.append("</div>")

        if m.functions:
            parts.append("<h2>函数</h2>")
            parts.append("<ul>")
            for f in m.functions:
                sig = f.signature if hasattr(f, "signature") and f.signature else f.name
                if f.docstring:
                    parts.append(f"<li><span class='code'>{html.escape(sig)}</span><div><pre>{html.escape(f.docstring)}</pre></div></li>")
                else:
                    parts.append(f"<li><span class='code'>{html.escape(sig)}</span></li>")
            parts.append("</ul>")

        mod_html = _page(f"模块 - {m.module}", "\n".join(parts))
        _write(os.path.join(site_dir, f"module-{_safe_name(m.module)}.html"), mod_html)

    return {
        "status": "completed",
        "site_dir": site_dir,
        "generator_used": "builtin",
        "errors_detail_path": None,
    }